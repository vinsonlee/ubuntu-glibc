--- a/libpthread/forward.c
+++ b/libpthread/forward.c
@@ -132,7 +132,7 @@ FORWARD (pthread_mutex_unlock, (pthread_
 FORWARD2 (pthread_self, pthread_t, (void), (), return 0)
 
 
-FORWARD (pthread_setcancelstate, (int state, int *oldstate), (state, oldstate),
+FORWARD (__pthread_setcancelstate, (int state, int *oldstate), (state, oldstate),
 	 0)
 
 FORWARD (pthread_setcanceltype, (int type, int *oldtype), (type, oldtype), 0)
--- a/libpthread/pthread/pt-initialize.c
+++ b/libpthread/pthread/pt-initialize.c
@@ -61,7 +61,7 @@ static const struct pthread_functions pt
     .ptr_pthread_mutex_trylock = __pthread_mutex_trylock,
     .ptr_pthread_mutex_unlock = __pthread_mutex_unlock,
     .ptr_pthread_self = __pthread_self,
-    .ptr_pthread_setcancelstate = __pthread_setcancelstate,
+    .ptr___pthread_setcancelstate = __pthread_setcancelstate,
     .ptr_pthread_setcanceltype = __pthread_setcanceltype,
     .ptr___pthread_get_cleanup_stack = __pthread_get_cleanup_stack,
     .ptr_pthread_once = __pthread_once,
--- a/libpthread/sysdeps/pthread/flockfile.c
+++ b/libpthread/sysdeps/pthread/flockfile.c
@@ -18,7 +18,7 @@
 
 #include <stdio.h>
 #include <libio.h>
-#include <bits/libc-lock.h>
+#include <libc-lock.h>
 
 
 void
--- a/libpthread/sysdeps/pthread/ftrylockfile.c
+++ b/libpthread/sysdeps/pthread/ftrylockfile.c
@@ -19,7 +19,7 @@
 #include <errno.h>
 #include <pthread.h>
 #include <stdio.h>
-#include <bits/stdio-lock.h>
+#include <stdio-lock.h>
 
 
 int
--- a/libpthread/sysdeps/pthread/funlockfile.c
+++ b/libpthread/sysdeps/pthread/funlockfile.c
@@ -19,7 +19,7 @@
 #include <pthread.h>
 #include <stdio.h>
 #include <libio.h>
-#include <bits/stdio-lock.h>
+#include <stdio-lock.h>
 
 
 void
--- a/libpthread/sysdeps/pthread/pthread-functions.h
+++ b/libpthread/sysdeps/pthread/pthread-functions.h
@@ -114,7 +114,7 @@ struct pthread_functions
   int (*ptr_pthread_mutex_trylock) (pthread_mutex_t *);
   int (*ptr_pthread_mutex_unlock) (pthread_mutex_t *);
   pthread_t (*ptr_pthread_self) (void);
-  int (*ptr_pthread_setcancelstate) (int, int *);
+  int (*ptr___pthread_setcancelstate) (int, int *);
   int (*ptr_pthread_setcanceltype) (int, int *);
   struct __pthread_cancelation_handler **(*ptr___pthread_get_cleanup_stack) (void);
   int (*ptr_pthread_once) (pthread_once_t *, void (*) (void));
