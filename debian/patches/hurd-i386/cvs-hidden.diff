--- a/sysdeps/i386/setjmp.S
+++ b/sysdeps/i386/setjmp.S
@@ -55,3 +55,4 @@
 	jmp __sigjmp_save
 #endif
 END (__sigsetjmp)
+hidden_def (__sigsetjmp)
--- a/sysdeps/mach/hurd/accept4.c
+++ b/sysdeps/mach/hurd/accept4.c
@@ -95,5 +95,4 @@
 
   return _hurd_intern_fd (new, O_IGNORE_CTTY | flags, 1);
 }
-libc_hidden_def (__libc_accept4)
 weak_alias (__libc_accept4, accept4)
--- a/sysdeps/mach/hurd/dl-sysdep.c
+++ b/sysdeps/mach/hurd/dl-sysdep.c
@@ -55,7 +55,8 @@
 int __libc_multiple_libcs = 0;	/* Defining this here avoids the inclusion
 				   of init-first.  */
 /* This variable contains the lowest stack address ever used.  */
-void *__libc_stack_end;
+void *__libc_stack_end = NULL;
+rtld_hidden_data_def(__libc_stack_end)
 
 #if HP_TIMING_AVAIL
 hp_timing_t _dl_cpuclock_offset;
--- a/sysdeps/mach/hurd/fxstatat64.c
+++ b/sysdeps/mach/hurd/fxstatat64.c
@@ -43,3 +43,4 @@
 
   return __hurd_fail (err);
 }
+libc_hidden_def (__fxstatat64)
--- a/sysdeps/mach/hurd/if_index.c
+++ b/sysdeps/mach/hurd/if_index.c
@@ -65,7 +65,9 @@
     }
   free (ifn);
 }
+libc_hidden_def (__if_freenameindex)
 weak_alias (__if_freenameindex, if_freenameindex)
+libc_hidden_weak (if_freenameindex)
 
 /* Return an array of if_nameindex structures, one for each network
    interface present, plus one indicating the end of the array.  On
@@ -152,6 +154,7 @@
   return idx;
 }
 weak_alias (__if_nameindex, if_nameindex)
+libc_hidden_weak (if_nameindex)
 
 /* Store the name of the interface corresponding to index IFINDEX in
    IFNAME (which has space for at least IFNAMSIZ characters).  Return
--- a/sysdeps/mach/hurd/open.c
+++ b/sysdeps/mach/hurd/open.c
@@ -56,5 +56,5 @@
 /* open64 is just the same as open for us.  */
 weak_alias (__libc_open, __libc_open64)
 weak_alias (__libc_open, __open64)
-libc_hidden_weak (_open64)
+libc_hidden_weak (__open64)
 weak_alias (__libc_open, open64)
--- a/sysdeps/mach/hurd/sigwait.c
+++ b/sysdeps/mach/hurd/sigwait.c
@@ -134,4 +134,5 @@
   return 0;
 }
 
+libc_hidden_def (__sigwait)
 weak_alias (__sigwait, sigwait)
--- a/sysdeps/mach/hurd/xmknodat.c
+++ b/sysdeps/mach/hurd/xmknodat.c
@@ -115,3 +115,5 @@
     return __hurd_fail (err);
   return 0;
 }
+
+libc_hidden_def (__xmknodat)
--- a/sysdeps/mach/nanosleep.c
+++ b/sysdeps/mach/nanosleep.c
@@ -19,10 +19,11 @@
 #include <errno.h>
 #include <mach.h>
 #include <sys/time.h>
+#include <time.h>
 #include <unistd.h>
 
 int
-__nanosleep (const struct timespec *requested_time,
+__libc_nanosleep (const struct timespec *requested_time,
 	     struct timespec *remaining)
 {
   mach_port_t recv;
@@ -64,5 +65,6 @@
 
   return 0;
 }
+weak_alias(__libc_nanosleep, __nanosleep)
 libc_hidden_def (__nanosleep)
-weak_alias (__nanosleep, nanosleep)
+weak_alias (__libc_nanosleep, nanosleep)
--- a/libpthread/sysdeps/generic/raise.c
+++ b/libpthread/sysdeps/generic/raise.c
@@ -19,6 +19,7 @@
    <http://www.gnu.org/licenses/>.  */
 
 #include <pthread.h>
+#include <signal.h>
 
 #pragma weak pthread_kill
 #pragma weak pthread_self
@@ -43,3 +44,5 @@
   return 0;
 }
 
+libc_hidden_def (raise)
+weak_alias (raise, gsignal)
--- a/libpthread/sysdeps/generic/pt-key-create.c
+++ b/libpthread/sysdeps/generic/pt-key-create.c
@@ -21,9 +21,10 @@
 #include <pt-internal.h>
 
 int
-pthread_key_create (pthread_key_t *key, void (*destructor) (void *))
+__pthread_key_create (pthread_key_t *key, void (*destructor) (void *))
 {
   return ENOSYS;
 }
 
+strong_alias (__pthread_key_create, pthread_key_create)
 stub_warning (pthread_key_create)
--- a/libpthread/sysdeps/hurd/pt-key-create.c
+++ b/libpthread/sysdeps/hurd/pt-key-create.c
@@ -108,4 +108,3 @@
   return 0;
 }
 strong_alias (__pthread_key_create, pthread_key_create)
-hidden_def (__pthread_key_create)
--- /dev/null
+++ b/libpthread/sysdeps/generic/shm-directory.h
@@ -0,0 +1,31 @@
+/* Header for directory for shm/sem files.  libpthread version.
+   Copyright (C) 2014-2015 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <http://www.gnu.org/licenses/>.  */
+
+#ifndef _SHM_DIRECTORY_H
+
+#include <sysdeps/posix/shm-directory.h>
+
+/* For libpthread the __shm_directory function lives in libpthread.
+   We don't want PLT calls from there.  But it's also used from
+   librt, so it cannot just be declared hidden.  */
+
+#if IS_IN (libpthread)
+hidden_proto (__shm_directory)
+#endif
+
+#endif  /* shm-directory.h */
