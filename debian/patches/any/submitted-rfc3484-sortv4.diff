2007-08-16  Aurelien Jarno  <aurelien@aurel32.net>

	* sysdeps/posix/getaddrinfo.c (gaiconf_reload_flag): Move
	to the top of the file. 
	(gaiconf_mtime): Likewise.
	(sortv4): New configuration variable.
	(gaiconf_init): Parse the sortv4 option in the configuration
	file.
	(rfc3484_sort): Ignore rule 9 for IPv4 adresses if sortv4
	is false.
	* posix/gai.conf: Add the new sortv4 option.


--- posix/gai.conf.orig
+++ posix/gai.conf
@@ -15,6 +15,11 @@
 #    changed and if necessary reload.  This option should not really be
 #    used.  There are possible runtime problems.  The default is no.
 #
+# sortv4  <yes|no>
+#    If set to no, getaddrinfo(3) will ignore IPv4 adresses in rule 9.  See
+#    section 6 in RFC 3484.  The default is yes.  Setting this option to
+#    no breaks conformance to RFC 3484.
+#
 # label   <mask>   <value>
 #    Add another rule to the RFC 3484 label table.  See section 2.1 in
 #    RFC 3484.  The default is:
--- sysdeps/posix/getaddrinfo.c.orig
+++ sysdeps/posix/getaddrinfo.c
@@ -79,6 +79,16 @@
 # define UNIX_PATH_MAX  108
 #endif
 
+/* Nozero if we are supposed to reload the config file automatically
+   whenever it changed.  */
+static int gaiconf_reload_flag;
+
+/* Zero if we are supposed to ignore rule 9 for IPv4 addresses */
+static int gaiconf_sortv4_flag = 1;
+
+/* Last modification time.  */
+static struct timespec gaiconf_mtime;
+
 struct gaih_service
   {
     const char *name;
@@ -1345,7 +1355,7 @@
       int bit1 = 0;
       int bit2 = 0;
 
-      if (a1->dest_addr->ai_family == PF_INET)
+      if (gaiconf_sortv4_flag && a1->dest_addr->ai_family == PF_INET)
 	{
 	  assert (a1->source_addr.ss_family == PF_INET);
 	  assert (a2->source_addr.ss_family == PF_INET);
@@ -1619,6 +1629,8 @@
 		  if (gaiconf_reload_flag)
 		    gaiconf_reload_flag_ever_set = 1;
 		}
+	      else if (strcmp (cmd, "sortv4") == 0)
+		gaiconf_sortv4_flag = strcmp (val1, "no") != 0;
 	      break;
 
 	    case 10:
