#! /bin/sh -e

# All lines beginning with `# DP:' are a description of the patch.
# DP: This assertion breaks applications if they redefine malloc/free functions,
# DP: malloc_usable_size may then report wrong values.  This is true for instance
# DP: with bash, whereas bash-static works fine because it does not use its own
# DP: wrapper functions.  See #322011 and merged bugs.

# DP: Dpatch author: Denis Barbier
# DP: Patch author: Denis Barbier
# DP: Upstream status: BZ692
# DP: Date: 2006-01-12

PATCHLEVEL=1

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p$PATCHLEVEL < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p$PATCHLEVEL < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.
Index: glibc-2.3.5/nis/nss_nis/nis-netgrp.c
===================================================================
--- glibc-2.3.5.orig/nis/nss_nis/nis-netgrp.c
+++ glibc-2.3.5/nis/nss_nis/nis-netgrp.c
@@ -76,7 +76,10 @@
 	 and the last byte is filled with NUL.  So we can simply
 	 use that buffer.  */
       assert (len > 0);
-      assert (malloc_usable_size (netgrp->data) >= len + 1);
+      /* Call to malloc_usable_size disabled, this breaks if applications
+	 redefine malloc/free with a different implementation.
+	 This assert is always true, see yp_match.  */ 
+      /* assert (malloc_usable_size (netgrp->data) >= len + 1);*/
       assert (netgrp->data[len] == '\0');
 
       netgrp->data_size = len;
