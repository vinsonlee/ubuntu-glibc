#! /bin/sh -e

# All lines beginning with `# DP:' are a description of the patch.
# DP: Description: Allow non-page aligned ulimits
# DP: Related bugs: 223441, 225466
# DP: Author: Roland McGrath
# DP: Upstream status: In CVS
# DP: Status Details: 
# DP: Date: 2003-12-31

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p0 < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p0 < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

2003-12-23  Roland McGrath  <roland@redhat.com>
										        * init.c (__pthread_initialize_minimal_internal): Round stack rlimit
        value up to page size for __default_stacksize.


# append the patch here and adjust the -p? flag in the patch calls.
Index: init.c
===================================================================
RCS file: /cvs/glibc/libc/nptl/init.c,v
retrieving revision 1.40
retrieving revision 1.41
diff -u -p -r1.40 -r1.41
--- nptl/init.c	24 Sep 2003 03:08:19 -0000	1.40
+++ nptl/init.c	18 Dec 2003 02:27:11 -0000	1.41
@@ -249,11 +249,7 @@ __pthread_initialize_minimal_internal (v
        default.  */
     limit.rlim_cur = ARCH_STACK_DEFAULT_SIZE;
 
-#ifdef NEED_SEPARATE_REGISTER_STACK
-  __default_stacksize = MAX (limit.rlim_cur / 2, PTHREAD_STACK_MIN);
-#else
   __default_stacksize = MAX (limit.rlim_cur, PTHREAD_STACK_MIN);
-#endif
   /* The maximum page size better should be a multiple of the page
      size.  */
   assert (__default_stacksize % __sysconf (_SC_PAGESIZE) == 0);
Index: init.c
===================================================================
RCS file: /cvs/glibc/libc/nptl/init.c,v
retrieving revision 1.42
retrieving revision 1.43
diff -u -p -r1.42 -r1.43
--- nptl/init.c	19 Dec 2003 01:33:33 -0000	1.42
+++ nptl/init.c	23 Dec 2003 23:07:09 -0000	1.43
@@ -255,12 +255,17 @@ __pthread_initialize_minimal_internal (v
       || limit.rlim_cur == RLIM_INFINITY)
     /* The system limit is not usable.  Use an architecture-specific
        default.  */
-    limit.rlim_cur = ARCH_STACK_DEFAULT_SIZE;
-
-  __default_stacksize = MAX (limit.rlim_cur, PTHREAD_STACK_MIN);
-  /* The maximum page size better should be a multiple of the page
-     size.  */
-  assert (__default_stacksize % __sysconf (_SC_PAGESIZE) == 0);
+    __default_stacksize = ARCH_STACK_DEFAULT_SIZE;
+  else if (limit.rlim_cur < PTHREAD_STACK_MIN)
+    /* The system limit is unusably small.
+       Use the minimal size acceptable.  */
+    __default_stacksize = PTHREAD_STACK_MIN;
+  else
+    {
+      /* Round the resource limit up to page size.  */
+      const uintptr_t pagesz = __sysconf (_SC_PAGESIZE);
+      __default_stacksize = (limit.rlim_cur + pagesz - 1) & -pagesz;
+    }
 
   /* Get the size of the static and alignment requirements for the TLS
      block.  */
