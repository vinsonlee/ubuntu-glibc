--- sysdeps/unix/bsd/bsd4.4/kfreebsd/bits/socket.h.orig	2006-05-30 00:26:45.000000000 +0200
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/bits/socket.h	2006-05-30 00:27:00.000000000 +0200
@@ -192,7 +192,7 @@
     MSG_COMPAT		= 0x8000,/* Used in sendit().  */
 #define MSG_COMPAT MSG_COMPAT
     MSG_NOSIGNAL	= 0x20000 /* do not generate SIGPIPE on EOF */
-#if 0 /* available since FreeBSD 6.0 */
+#if 1 /* available since FreeBSD 6.0 */
 #define MSG_NOSIGNAL MSG_NOSIGNAL 
 #endif
   };
--- linuxthreads/sysdeps/unix/bsd/bsd4.4/kfreebsd/allocrtsig.c	2005-12-19 08:43:29.000000000 +0100
+++ linuxthreads/sysdeps/unix/bsd/bsd4.4/kfreebsd/allocrtsig.c	2006-03-02 10:34:13.000000000 +0100
@@ -1,4 +1,4 @@
-#include <sysdeps/generic/allocrtsig.c>
+#include <signal/allocrtsig.c>
 strong_alias (__libc_current_sigrtmin, __libc_current_sigrtmin_private);
 strong_alias (__libc_current_sigrtmax, __libc_current_sigrtmax_private);
 strong_alias (__libc_allocate_rtsig, __libc_allocate_rtsig_private);
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/kernel-posix-cpu-timers.h	1970-01-01 01:00:00.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/kernel-posix-cpu-timers.h	2006-03-02 14:04:19.000000000 +0100
@@ -0,0 +1 @@
+/* placeholder */
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/bits/fcntl.h	2005-12-16 16:29:14.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/bits/fcntl.h	2006-03-02 11:24:01.000000000 +0100
@@ -43,6 +43,8 @@
 #define O_NOFOLLOW	0x0100	/* Don't follow symlinks.  */
 #endif
 
+enum { O_DIRECTORY = 0 };
+
 /* File status flags for `open' and `fcntl'.  */
 #define	O_APPEND	0x0008	/* Writes append to the file.  */
 #define	O_NONBLOCK	0x0004	/* Non-blocking I/O.  */
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/check_fds.c	1970-01-01 01:00:00.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/check_fds.c	2006-03-02 10:30:14.000000000 +0100
@@ -0,0 +1 @@
+void __libc_check_standard_fds (void) {;}
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/check_pf.c	1970-01-01 01:00:00.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/check_pf.c	2006-03-02 10:39:53.000000000 +0100
@@ -0,0 +1 @@
+#include <inet/check_pf.c>
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/dl-osinfo.h	2006-02-14 18:12:55.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/dl-osinfo.h	2006-03-02 11:24:32.000000000 +0100
@@ -97,3 +97,24 @@
           }								      \
       }									      \
   } while (0)
+
+static inline uintptr_t __attribute__ ((always_inline))
+_dl_setup_stack_chk_guard (void)
+{
+  uintptr_t ret;
+#ifdef ENABLE_STACKGUARD_RANDOMIZE 
+  int fd = __open ("/dev/urandom", O_RDONLY);
+  if (fd >= 0)
+    {
+      ssize_t reslen = __read (fd, &ret, sizeof (ret));
+      __close (fd);
+      if (reslen == (ssize_t) sizeof (ret))
+        return ret;
+    }
+#endif
+  ret = 0;
+  unsigned char *p = (unsigned char *) &ret;
+  p[sizeof (ret) - 1] = 255;
+  p[sizeof (ret) - 2] = '\n';
+  return ret;
+}
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/glob.c	2006-01-23 11:02:39.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/glob.c	2006-03-02 10:37:07.000000000 +0100
@@ -1,3 +1,3 @@
 /* 'glob64' is different from 'glob', because
    'struct stat64' != 'struct stat'.  */
-#include <sysdeps/generic/glob.c>
+#include <posix/glob.c>
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/sysdep.h	2006-01-19 14:02:55.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/sysdep.h	2006-03-02 10:31:06.000000000 +0100
@@ -81,27 +81,6 @@
 # define SYSCALL_ERROR_HANDLER	/* Nothing here; code in sysdep.S is used.  */
 #else
 
-# ifndef HAVE_HIDDEN
-#  define SETUP_PIC_REG(reg) \
-  call 1f;								      \
-  .subsection 1;							      \
-1:movl (%esp), %e##reg;							      \
-  ret;									      \
-  .previous
-# else
-#  define SETUP_PIC_REG(reg) \
-  .section .gnu.linkonce.t.__i686.get_pc_thunk.reg,"ax",@progbits;	      \
-  .globl __i686.get_pc_thunk.reg;					      \
-  .hidden __i686.get_pc_thunk.reg;					      \
-  .type __i686.get_pc_thunk.reg,@function;				      \
-__i686.get_pc_thunk.reg:						      \
-  movl (%esp), %e##reg;							      \
-  ret;									      \
-  .size __i686.get_pc_thunk.reg, . - __i686.get_pc_thunk.reg;		      \
-  .previous;								      \
-  call __i686.get_pc_thunk.reg
-# endif
-
 # if RTLD_PRIVATE_ERRNO
 #  define SYSCALL_ERROR_HANDLER						      \
 0:SETUP_PIC_REG(cx);							      \
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/sbrk.c	1970-01-01 01:00:00.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/sbrk.c	2006-03-02 10:39:38.000000000 +0100
@@ -0,0 +1 @@
+#include <misc/sbrk.c>
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/sigreturn.c	2005-12-16 13:27:58.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/sigreturn.c	2006-03-02 10:38:02.000000000 +0100
@@ -1,3 +1,3 @@
 /* The sigreturn syscall cannot be explicitly called on FreeBSD, only
    implicitly by returning from a signal handler.  */
-#include <sysdeps/generic/sigreturn.c>
+#include <signal/sigreturn.c>
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/utmp-compat/utmp_file.c	2005-12-16 13:27:58.000000000 +0100
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/utmp-compat/utmp_file.c	2006-03-02 10:36:08.000000000 +0100
@@ -1 +1 @@
-#include <sysdeps/generic/utmp_file.c>
+#include <login/utmp_file.c>
--- linuxthreads/sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/sysdep-cancel.h	(revision 1568)
+++ linuxthreads/sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/sysdep-cancel.h	(revision 1570)
@@ -61,12 +61,13 @@
 	fork()
 	vfork()
 	rfork()
+	pipe()
    
    none of them is cancelable, therefore
 */
 
-# define PUSHRESULT	pushl %eax; pushfl
-# define POPRESULT	popfl; popl %eax
+# define PUSHRESULT	pushl %eax; cfi_adjust_cfa_offset (4);  pushfl;    cfi_adjust_cfa_offset (4)
+# define POPRESULT	popfl;      cfi_adjust_cfa_offset (-4); popl %eax; cfi_adjust_cfa_offset (-4)
 
 # ifdef IS_IN_libpthread
 #  define CENABLE	call __pthread_enable_asynccancel;
@@ -74,15 +75,23 @@
 # elif defined IS_IN_librt
 #  ifdef PIC
 #   define CENABLE	pushl %ebx; \
+			cfi_adjust_cfa_offset (4); \
+			cfi_rel_offset (ebx, 0); \
 			call __i686.get_pc_thunk.bx; \
 			addl     $_GLOBAL_OFFSET_TABLE_, %ebx; \
 			call __librt_enable_asynccancel@PLT; \
-			popl %ebx;
+			popl %ebx; \
+			cfi_adjust_cfa_offset (-4); \
+			cfi_restore (ebx);
 #   define CDISABLE	pushl %ebx; \
+			cfi_adjust_cfa_offset (4); \
+			cfi_rel_offset (ebx, 0); \
 			call __i686.get_pc_thunk.bx; \
 			addl     $_GLOBAL_OFFSET_TABLE_, %ebx; \
 			call __librt_disable_asynccancel@PLT; \
-			popl %ebx;
+			popl %ebx; \
+			cfi_adjust_cfa_offset (-4); \
+			cfi_restore (ebx);
 #  else
 #   define CENABLE	call __librt_enable_asynccancel;
 #   define CDISABLE	call __librt_disable_asynccancel
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/rfork.S	(revision 1568)
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/rfork.S	(revision 1570)
@@ -33,6 +33,7 @@
 	andl %edx, %eax
 
 	popl %edx
+	cfi_adjust_cfa_offset(-4)
 	jmp  *%ecx
 
 L(pseudo_end):
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/start_thread.S	(revision 1568)
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/start_thread.S	(revision 1570)
@@ -28,6 +28,10 @@
 
 	.text
 ENTRY (__start_thread)
+	/* End FDE now, because in the child the unwind info will be
+	   wrong.  */
+	cfi_endproc
+
 	/* There is a window of a few instructions, right after the rfork
 	   system call, where the handling of a signal would write garbage
 	   into the stack shared by the parent and the child (assuming
@@ -199,4 +203,5 @@
 	popl	%ebx
 	popl	%ebp
 	jmp	SYSCALL_ERROR_LABEL
+	cfi_startproc
 PSEUDO_END (__start_thread)
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/vfork.S	(revision 1568)
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/vfork.S	(revision 1570)
@@ -27,6 +27,7 @@
 
 	/* Pop the return PC value into ECX.  */
 	popl	%ecx
+	cfi_adjust_cfa_offset(-4)
 
 	/* Perform the system call.  */
 	DO_CALL (vfork, 0)
@@ -45,6 +46,7 @@
 L(error):
 	/* Push back the return PC.  */
 	pushl	%ecx
+	cfi_adjust_cfa_offset(4)
 
 	/* Branch to the error handler, hidden in PSEUDO_END.  */
 	jmp	SYSCALL_ERROR_LABEL
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/sysdep.h	(revision 1568)
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/sysdep.h	(revision 1570)
@@ -136,14 +136,20 @@
 #  else
 #   define SYSCALL_ERROR_HANDLER					      \
 0:pushl %ebx;								      \
+  cfi_adjust_cfa_offset (4);                                                  \
+  cfi_rel_offset (ebx, 0);                                                    \
   SETUP_PIC_REG (bx);							      \
   addl $_GLOBAL_OFFSET_TABLE_, %ebx;					      \
   pushl %eax;								      \
+  cfi_adjust_cfa_offset (4);                                                  \
   PUSH_ERRNO_LOCATION_RETURN;						      \
   call BP_SYM (__errno_location)@PLT;					      \
   POP_ERRNO_LOCATION_RETURN;						      \
   popl %ecx;								      \
+  cfi_adjust_cfa_offset (-4);                                                 \
   popl %ebx;								      \
+  cfi_adjust_cfa_offset (-4);                                                 \
+  cfi_restore (ebx);                                                          \
   movl %ecx, (%eax);							      \
   orl $-1, %eax;							      \
   jmp L(pseudo_end);
--- sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/syscall.S	(revision 1568)
+++ sysdeps/unix/bsd/bsd4.4/kfreebsd/i386/syscall.S	(revision 1570)
@@ -21,9 +21,11 @@
 	  .text;
 ENTRY (syscall)
 	popl %ecx		/* Pop return address into %ecx.  */
+	cfi_adjust_cfa_offset (-4)
 	movl 0(%esp), %eax	/* Load syscall number into %eax. */
 	int $0x80		/* Do the system call.  */
 	pushl %ecx		/* Push back return address.  */
+	cfi_adjust_cfa_offset (4)
 	jb SYSCALL_ERROR_LABEL;	/* Jump to error handler if error.  */
 
 L(pseudo_end):
